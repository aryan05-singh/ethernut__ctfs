Problem Statement

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "openzeppelin-contracts-06/math/SafeMath.sol";

contract Fallout {
    using SafeMath for uint256;

    mapping(address => uint256) allocations;
    address payable public owner;

    /* constructor */
    function Fal1out() public payable {
        owner = msg.sender;
        allocations[owner] = msg.value;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "caller is not the owner");
        _;
    }

    function allocate() public payable {
        allocations[msg.sender] = allocations[msg.sender].add(msg.value);
    }

    function sendAllocation(address payable allocator) public {
        require(allocations[allocator] > 0);
        allocator.transfer(allocations[allocator]);
    }

    function collectAllocations() public onlyOwner {
        msg.sender.transfer(address(this).balance);
    }

    function allocatorBalance(address allocator) public view returns (uint256) {
        return allocations[allocator];
    }

Solution
->You can invoke this function to make yourself the owner. Once called, owner = msg.sender; will set your address as the owner, regardless of the initial owner who deployed the contract.
After calling Fal1out(), your address will now be stored as the owner of the contract. This grants you access to the onlyOwner functions, including the collectAllocations() function.
 Now that you are the owner, you can call collectAllocations(), which will transfer the entire balance of the contract to your address (msg.sender).
Mainly remember two poits
1.Call the Fal1out() function, passing any small amount of ether (or even 0 ether) to become the owner.
2.After becoming the owner, call collectAllocations() to withdraw all ether held by the contract.
